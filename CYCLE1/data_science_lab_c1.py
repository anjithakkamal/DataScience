# -*- coding: utf-8 -*-
"""DATA SCIENCE LAB C1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HI8ETRLhG_4VaAaaQ5TOeinIy7pdsV6X
"""

#1. Program to Print all non-Prime Numbers in an Interval
start = 11
end = 25
for i in range(start, end + 1):
    if i > 1:
        for j in range(2, i):
            if (i % j == 0):
                break
        else:
print(i)

##2. Program to print the first N Fibonacci numbers.
def printFibonacciNumbers(n):
    f1 = 0
    f2 = 1
    if (n < 1):
        return
    print(f1, end=" ")
    for x in range(1, n):
        print(f2, end=" ")
        next = f1 + f2
        f1 = f2
        f2 = next

printFibonacciNumbers(7)

##3. Given sides of a triangle, write a program to check whether given triangle is an isosceles, equilateral or scalene.
def checkTriangle(x, y, z):

    if x == y == z:
        print("Equilateral Triangle")


    elif x == y or y == z or z == x:
        print("Isosceles Triangle")


    else:
        print("Scalene Triangle")

x = input("enter the first side")
y = input("enter the second variable")
z = input("enter the third variable")

checkTriangle(x, y, z)

#4.4. Program to check whether given pair of number is coprime

def __gcd(a, b):
    if (a == 0 or b == 0): return 0
    if (a == b): return a
    if (a > b):
        return __gcd(a - b, b)
    return __gcd(a, b - a)
def coprime(a, b):
    if (__gcd(a, b) == 1):
        print("Co-Prime")
    else:
        print("Not Co-Prime")
a = 5;
b = 6
coprime(a, b)
a = 7;
b = 8
coprime(a, b)

##5. Program to find the roots of a quadratic equation(rounded to 2 decimal places)

from math import sqrt
print("Quadratic function : (a * x^2) + b*x + c")
a = float(input("a: "))
b = float(input("b: "))
c = float(input("c: "))
r = b ** 2 - 4 * a * c
if r > 0:
    num_roots = 2
    x1 = (((-b) + sqrt(r)) / (2 * a))
    x2 = (((-b) - sqrt(r)) / (2 * a))
    print("There are 2 roots: %f and %f" % (x1, x2))
elif r == 0:
    num_roots = 1
    x = (-b) / 2 * a
    print("There is one root: ", x)
else:
    num_roots = 0
    print("No roots, discriminant < 0.")
exit()

##6. Program to check whether a given number is perfect number or not(sum of factors=number).
n = int(input("Enter any number: "))
sum1 = 0
for i in range(1, n):
    if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
    print("The number is a Perfect number!")
else:
print("The number is not a Perfect number!")

##Q7.Program to display amstrong numbers upto 1000
for num in range(0,1000):
  temp=num
  sum=0

  while temp > 0:
    digit = temp % 10
    sum = sum + digit ** 3
    temp = temp // 10
    if sum == num:
      print(num)

##Q8.Store and display the days of a week as a List, Tuple, Dictionary, Set. Also demonstrate different ways to store values in each of them. Display its type also.
list = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]
print(type(list))
print(list)
tuple = ("Sun","Mon","Tue","Wed","Thu","Fri","Sat")
print(type(tuple))
print(tuple)
set = {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"}
print(type(set))
print(set)
dict = {
    "d1" : "Sun",
    "d2" : "Mon",
    "d3" : "Tue",
    "d4" : "Wed",
    "d5" : "Thu",
    "d6" : "Fri",
    "d7" : "Sat"
}
print(type(dict))
print(dict)

##9.Write a program to add elements of given 2 lists
thislist=["apple","orange","grape"]
thislist2=["cherry","pineapple","mango"]
thislist.extend(thislist2)
print(thislist)

##10.Write a program to find the sum of 2 matrices using nested List.
x = [[1,12,2],
     [4,5,12],
     [8,10,15]]
y = [[1,12,2],
     [4,5,12],
     [8,10,15]]
res = [[0,0,0],
       [0,0,0],
       [0,0,0]]

for i in range(len(x)):
  for j in range(len(x[0])):
    res[i][j] = x[i][j] + y[i][j]
for r in res:
  print(r)

##11.Write a program to perform bubble sort on a given set of elements.
  
a = [35, 10, 31, 11, 26]   
print("Before sorting array elements are - ")  
for i in a:
  print(i, end = " ")    
  for i in range(0,len(a)):    
    for j in range(i+1,len(a)):    
      if a[j]<a[i]:    
        temp = a[j]    
        a[j]=a[i]   
        a[i]=temp    
print("\nAfter sorting array elements are - ")    
for i in a:     
  print(i, end = " ")

##12.Program to find the count of each vowel in a string(use dictionary)
string=input("Enter string:")
vowels=0
for i in string:
      if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u' or i=='A' or i=='E' or i=='I' or i=='O' or i=='U'):
            vowels=vowels+1
print("Number of vowels are:")
print(vowels)

##13.Write a Python program that accept a positive number and subtract from this number the sum of its digits and so on. Continues this operation until the number ispositive
def repeat_times(n):
  s = 0
  n_str = str(n)
  while (n > 0):
    n -= sum([int(i) for i in list(n_str)])
    n_str = list(str(n))
    s += 1
  return s
print(repeat_times(9))
print(repeat_times(21))

##14. Write a Python program that accepts a 10 digit mobile number, and find the digits which are absent in a given mobile number

def absent_digits(n):
  all_nums = set([0,1,2,3,4,5,6,7,8,9])
  n = set([int(i) for i in n])
  n = n.symmetric_difference(all_nums)
  n = sorted(n)
  return n
print(absent_digits([9,5,2,6,0,1,4,6,8,4]))

#10 matrix addition
matOne = []
print("Enter  Elements for First Matrix: ")
for i in range(3):
    matOne.append([])
    for j in range(3):
        num = int(input())
        matOne[i].append(num)

matTwo = []
print("Enter  Elements for Second Matrix: ")
for i in range(3):
    matTwo.append([])
    for j in range(3):
        num = int(input())
        matTwo[i].append(num)

matThree = []
for i in range(3):
    matThree.append([])
    for j in range(3):
        matThree[i].append(matOne[i][j]+matTwo[i][j])

print("\nAddition Result of Two Given Matrix is:")
for i in range(3):
    for j in range(3):
        print(matThree[i][j], end=" ")
    print()